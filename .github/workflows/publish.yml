# This is a basic workflow to help you get started with Actions
#add env variable with version; is suffix is provided then take it, otherwise if dev branch then alpha-GITHUB_RUN_NUMBER suffix (1.14.0-alpha-20), if release then rc-GITHUB_RUN_NUMBER (1.14.0-rc-20)
name: Publish

# Controls when the workflow will run
on:
  workflow_dispatch:
    inputs:
      version-suffix:
        description: 'Release type (alpha, betta, preview, cr, release)'
        required: false

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  check_data:
    runs-on: ubuntu-latest
    outputs:
      match: ${{ steps.check-suffix.outputs.match }}
      mode: ${{ steps.set-mode.outputs.mode }}
      prerelease-number: ${{ steps.generate-prerelease-number.outputs.prerelease_number }}
      branch-name: ${{ steps.get-branch-name.outputs.branch_name }}
      branch-type: ${{ steps.check-brach-type.outputs.group1 }}
    steps:
      - uses: actions/checkout@v2
      
      - name: Get branch name
        id: get-branch-name
        run: echo "##[set-output name=branch_name;]${GITHUB_REF##*/}"
      
      - uses: actions-ecosystem/action-regex-match@v2
        name: Check version suffix ${{ github.event.inputs.version-suffix }}
        id: check-suffix
        with:
          text: ${{ github.event.inputs.version-suffix }}
          regex: '^(alpha|betta|preview|cr|release)$'
             
      - name: Release type is invalid
        if: ${{ steps.check-suffix.outputs.match == '' }}
        run: exit 1
        
      - name: Release type
        run: echo Release type is ${{ steps.check-suffix.outputs.group1 }}
        
      - name: Set mode
        id: set-mode
        run: echo "::set-output name=mode::${{ steps.check-suffix.outputs.group1 }}"
        
      - uses: actions-ecosystem/action-regex-match@v2
        name: Check brach type
        id: check-brach-type
        with:
          text: ${{ github.ref }}
          regex: '^refs\/heads\/(dev|release)-[0-9]+\.[0-9]+$'
          
      - name: Branch type is invalid
        if: ${{ steps.check-brach-type.outputs.match == '' }}
        run: exit 1
          
      - name: Branch type
        run: echo running on branch type ${{ steps.check-brach-type.outputs.group1 }}
        
      - name: Invalid combination of branch type and release type
        if: ${{ steps.check-brach-type.outputs.group1 == 'dev' && (steps.set-mode.outputs.mode == 'cr' || steps.set-mode.outputs.mode == 'release')
          || steps.check-brach-type.outputs.group1 == 'release' && (steps.set-mode.outputs.mode == 'alpha' 
          || steps.set-mode.outputs.mode == 'betta' || steps.set-mode.outputs.mode == 'preview') }}
        run: exit 1
      
      - uses: ./.github/actions/prerelease-number
        if: ${{ steps.set-mode.outputs.mode != 'release' }}
        name: Generate prerelease number
        id: generate-prerelease-number
        with:
          token: ${{secrets.github_token}}
          branch: ${{steps.get-branch-name.outputs.branch_name}}
          prerelease_type: ${{steps.set-mode.outputs.mode}}
  build:
    needs: [check_data]
    if: ${{ needs.check_data.outputs.mode != '' }}
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
            
      - name: Version suffix
        run: echo Version suffix is ${{ github.event.inputs.version-suffix }}
        
      - name: Version mode
        run: echo Version mode is ${{ needs.check_data.outputs.mode }}
        
      - name: Prerelease number
        run: echo Prerelease number is ${{ needs.check_data.outputs.prerelease-number }}
        
      - name: Branch name
        run: echo running on branch ${{ needs.check_data.outputs.branch-name }}
        
      - name: Branch type
        run: echo running on branch type ${{ needs.check_data.outputs.branch-type }}

      # Runs a single command using the runners shell
      #- name: Run a one-line script
        #run: echo Hello, world!
