name: Publish

# Controls when the workflow will run
on:
  workflow_dispatch:
    inputs:
      version-suffix:
        description: 'Release type (alpha, beta, preview, cr, release)'
        required: true
      
      force-publish:
        description: 'Force publish for release and rc if tests failed'
        default: 'false'
        required: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  check_data:
    runs-on: ubuntu-latest
    outputs:
      match: ${{ steps.check-suffix.outputs.match }}
      mode: ${{ steps.set-mode.outputs.mode }}
      #prerelease-number: ${{ steps.generate-prerelease-number.outputs.prerelease_number }}
      branch-name: ${{ steps.get-branch-name.outputs.branch_name }}
      branch-type: ${{ steps.parse-branch.outputs.group1 }}
      solution-major-version: ${{ steps.parse-solution-version.outputs.group1 }}
      solution-minor-version: ${{ steps.parse-solution-version.outputs.group2 }}
      solution-patch-version: ${{ steps.parse-solution-version.outputs.group3 }}
      branch-major-version: ${{ steps.parse-branch.outputs.group2 }}
      branch-minor-version: ${{ steps.parse-branch.outputs.group3 }}
    steps:
      - uses: actions/checkout@v2
            
      - name: Get branch name
        id: get-branch-name
        run: echo "##[set-output name=branch_name;]${GITHUB_REF##*/}"
        
      - id: get-version_string-based-on-solution
        uses: sandersaares-actions/make-version-string@master
        with:
          assemblyInfoPath: SharedAssemblyInfo.cs
          primaryBranch: ${{steps.get-branch-name.outputs.branch_name}}
          
      - name: Solution version string
        run: echo Solution version string is ${{ steps.get-version_string-based-on-solution.outputs.versionstring }}
        
      - uses: actions-ecosystem/action-regex-match@v2
        name: Parse solution version string
        id: parse-solution-version
        with:
          text: ${{ steps.get-version_string-based-on-solution.outputs.versionstring }}
          regex: '^([0-9]+)\.([0-9]+)\.([0-9]+)\.[0-9]+-.*$'
          
      - name: Validate Solution version string
        if: ${{ steps.parse-solution-version.outputs.match == '' }}
        run: | 
          echo Solution version string ${{ steps.get-version_string-based-on-solution.outputs.versionstring }} is invalid
          exit 1
      
      - uses: actions-ecosystem/action-regex-match@v2
        name: Parse branch
        id: parse-branch
        with:
          text: ${{ github.ref }}
          regex: '^refs\/heads\/(dev|release)-([0-9]+)\.([0-9])+$'
          
      - name: Branch type is invalid
        if: ${{ steps.parse-branch.outputs.match == '' }}
        run: exit 1
          
      - name: Branch type
        run: echo running on branch type ${{ steps.parse-branch.outputs.group1 }} 
      
      - name: Validate solution version matches branch version
        if: ${{ !(steps.parse-solution-version.outputs.group1 == steps.parse-branch.outputs.group2 && steps.parse-solution-version.outputs.group2 == steps.parse-branch.outputs.group3) }}
        run: | 
          echo Solution version ${{steps.parse-solution-version.outputs.group1}}.${{steps.parse-solution-version.outputs.group2}} does not match branch version ${{steps.parse-branch.outputs.group2}}.${{steps.parse-branch.outputs.group3}}
          exit 1
      
      - uses: actions-ecosystem/action-regex-match@v2
        name: Check version suffix ${{ github.event.inputs.version-suffix }}
        id: check-suffix
        with:
          text: ${{ github.event.inputs.version-suffix }}
          regex: '^(alpha|beta|preview|cr|release)$'
             
      - name: Release type is invalid
        if: ${{ steps.check-suffix.outputs.match == '' }}
        run: exit 1
        
      - name: Release type
        run: echo Release type is ${{ steps.check-suffix.outputs.group1 }}
        
      - name: Set mode
        id: set-mode
        run: echo "::set-output name=mode::${{ steps.check-suffix.outputs.group1 }}"
        
      - name: Invalid combination of branch type and release type
        if: ${{ steps.parse-branch.outputs.group1 == 'dev' && (steps.set-mode.outputs.mode == 'cr' || steps.set-mode.outputs.mode == 'release')
          || steps.parse-branch.outputs.group1 == 'release' && (steps.set-mode.outputs.mode == 'alpha' 
          || steps.set-mode.outputs.mode == 'beta' || steps.set-mode.outputs.mode == 'preview') }}
        run: exit 1
      
      #- uses: ./.github/actions/prerelease-number
     #  if: ${{ steps.set-mode.outputs.mode != 'release' }}
     #   name: Generate prerelease number
      #  id: generate-prerelease-number
      #  with:
       #   token: ${{secrets.github_token}}
       #   prefix: ${{steps.get-branch-name.outputs.branch_name}}.${{steps.parse-solution-version.outputs.group3}}
      #    prerelease_type: ${{steps.set-mode.outputs.mode}}
          
  build:
    needs: [check_data]
    if: ${{ needs.check_data.outputs.mode != '' }}
    runs-on: ubuntu-latest

    strategy:
        matrix:
          #RIDs: [win-x64, win-x86, linux-x64, linux-arm, linux-arm64]
          RIDs: [win-x64]
    
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 5.0.x
          
      - name: Restore dependencies
        run: dotnet restore
        
      - name: Test build
        run: dotnet build -p:Version=${{needs.check_data.outputs.solution-major-version}}.${{needs.check_data.outputs.solution-minor-version}}.${{needs.check_data.outputs.solution-patch-version}}.${{github.run_number}} ./SmartHomeApi.WebApi/SmartHomeApi.WebApi.csproj --configuration Release
      
      - name: Tests
        continue-on-error: ${{ github.event.inputs.version-suffix == 'true' || needs.check_data.outputs.mode == 'alpha' || needs.check_data.outputs.mode == 'beta' }}
        run: dotnet test --configuration Release --no-build --verbosity normal
          
      
      
      - name: Show workflow data
        run: |
          echo running on branch ${{ needs.check_data.outputs.branch-name }}
          echo running on branch type ${{ needs.check_data.outputs.branch-type }}
          echo Solution major version is ${{ needs.check_data.outputs.solution-major-version }}
          echo Solution minor version is ${{ needs.check_data.outputs.solution-minor-version }}
          echo Solution patch version is ${{ needs.check_data.outputs.solution-patch-version }}
          echo Branch major version is ${{ needs.check_data.outputs.branch-major-version }}
          echo Branch minor version is ${{ needs.check_data.outputs.branch-minor-version }}
          echo Version suffix is ${{ github.event.inputs.version-suffix }}
          echo Version mode is ${{ needs.check_data.outputs.mode }}
          #echo Prerelease number is ${{ needs.check_data.outputs.prerelease-number }}
          
   #   - uses: ./.github/actions/prerelease-number
   #     if: ${{ needs.check_data.outputs.mode != 'release' }}
   #     name: Generate prerelease number
   #     id: generate-prerelease-number
   #     with:
   #       token: ${{secrets.github_token}}
   #       prefix: ${{needs.check_data.outputs.branch-name}}.${{needs.check_data.outputs.solution-patch-version}}
   #       prerelease_type: ${{needs.check_data.outputs.mode}}
        
      #- name: Build
      #  env:
       #   RID: ${{ matrix.RIDs }}
       # run: dotnet build -r ${RID} -p:Version=${{needs.check_data.outputs.solution-major-version}}.${{needs.check_data.outputs.solution-minor-version}}.${{needs.check_data.outputs.solution-patch-version}}.${{github.run_number}} ./SmartHomeApi.WebApi/SmartHomeApi.WebApi.csproj --configuration Release
        
      
