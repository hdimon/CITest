name: Publish

# Controls when the workflow will run
on:
  workflow_dispatch:
    inputs:
      version-suffix:
        description: 'Release type (alpha, beta, preview, cr, release)'
        required: true
      
      force-publish:
        description: 'Force publish for release and rc if tests failed'
        default: 'false'
        required: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  check_data:
    runs-on: ubuntu-latest
    outputs:
      match: ${{ steps.check-suffix.outputs.match }}
      mode: ${{ steps.set-mode.outputs.mode }}
      #prerelease-number: ${{ steps.generate-prerelease-number.outputs.prerelease_number }}
      branch-name: ${{ steps.get-branch-name.outputs.branch_name }}
      branch-type: ${{ steps.parse-branch.outputs.group1 }}
      solution-major-version: ${{ steps.parse-solution-version.outputs.group1 }}
      solution-minor-version: ${{ steps.parse-solution-version.outputs.group2 }}
      solution-patch-version: ${{ steps.parse-solution-version.outputs.group3 }}
      branch-major-version: ${{ steps.parse-branch.outputs.group2 }}
      branch-minor-version: ${{ steps.parse-branch.outputs.group3 }}
    steps:
      - uses: actions/checkout@v2
            
      - name: Get branch name
        id: get-branch-name
        run: echo "##[set-output name=branch_name;]${GITHUB_REF##*/}"
        
      - id: get-version_string-based-on-solution
        uses: sandersaares-actions/make-version-string@master
        with:
          assemblyInfoPath: SharedAssemblyInfo.cs
          primaryBranch: ${{steps.get-branch-name.outputs.branch_name}}
          
      - name: Solution version string
        run: echo Solution version string is ${{ steps.get-version_string-based-on-solution.outputs.versionstring }}
        
      - uses: actions-ecosystem/action-regex-match@v2
        name: Parse solution version string
        id: parse-solution-version
        with:
          text: ${{ steps.get-version_string-based-on-solution.outputs.versionstring }}
          regex: '^([0-9]+)\.([0-9]+)\.([0-9]+)\.[0-9]+-.*$'
          
      - name: Validate Solution version string
        if: ${{ steps.parse-solution-version.outputs.match == '' }}
        run: | 
          echo Solution version string ${{ steps.get-version_string-based-on-solution.outputs.versionstring }} is invalid
          exit 1
      
      - uses: actions-ecosystem/action-regex-match@v2
        name: Parse branch
        id: parse-branch
        with:
          text: ${{ github.ref }}
          regex: '^refs\/heads\/(dev|release)-([0-9]+)\.([0-9])+$'
          
      - name: Branch type is invalid
        if: ${{ steps.parse-branch.outputs.match == '' }}
        run: exit 1
          
      - name: Branch type
        run: echo running on branch type ${{ steps.parse-branch.outputs.group1 }} 
      
      - name: Validate solution version matches branch version
        if: ${{ !(steps.parse-solution-version.outputs.group1 == steps.parse-branch.outputs.group2 && steps.parse-solution-version.outputs.group2 == steps.parse-branch.outputs.group3) }}
        run: | 
          echo Solution version ${{steps.parse-solution-version.outputs.group1}}.${{steps.parse-solution-version.outputs.group2}} does not match branch version ${{steps.parse-branch.outputs.group2}}.${{steps.parse-branch.outputs.group3}}
          exit 1
      
      - uses: actions-ecosystem/action-regex-match@v2
        name: Check version suffix ${{ github.event.inputs.version-suffix }}
        id: check-suffix
        with:
          text: ${{ github.event.inputs.version-suffix }}
          regex: '^(alpha|beta|preview|cr|release)$'
             
      - name: Release type is invalid
        if: ${{ steps.check-suffix.outputs.match == '' }}
        run: exit 1
        
      - name: Release type
        run: echo Release type is ${{ steps.check-suffix.outputs.group1 }}
        
      - name: Set mode
        id: set-mode
        run: echo "::set-output name=mode::${{ steps.check-suffix.outputs.group1 }}"
        
      - name: Invalid combination of branch type and release type
        if: ${{ steps.parse-branch.outputs.group1 == 'dev' && (steps.set-mode.outputs.mode == 'cr' || steps.set-mode.outputs.mode == 'release')
          || steps.parse-branch.outputs.group1 == 'release' && (steps.set-mode.outputs.mode == 'alpha' 
          || steps.set-mode.outputs.mode == 'beta' || steps.set-mode.outputs.mode == 'preview') }}
        run: exit 1
          
  build:
    needs: [check_data]
    if: ${{ needs.check_data.outputs.mode != '' }}
    runs-on: ubuntu-latest

    strategy:
        matrix:
          #RIDs: [win-x64, win-x86, linux-x64, linux-arm, linux-arm64]
          RIDs: [win-x64]
    
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 5.0.x
          
      - name: Restore dependencies
        run: dotnet restore
        
      - name: Test build
        run: dotnet build -p:Version=${{needs.check_data.outputs.solution-major-version}}.${{needs.check_data.outputs.solution-minor-version}}.${{needs.check_data.outputs.solution-patch-version}}.${{github.run_number}} ./SmartHomeApi.WebApi/SmartHomeApi.WebApi.csproj --configuration Release
      
      - name: Tests
        continue-on-error: ${{ github.event.inputs.force-publish == 'true' || needs.check_data.outputs.mode == 'alpha' || needs.check_data.outputs.mode == 'beta' }}
        run: dotnet test --configuration Release --verbosity normal
          
      #If we are at this point it means all checks passed and everything can be published
      - uses: ./.github/actions/prerelease-number
        if: ${{ needs.check_data.outputs.mode != 'release' }}
        name: Generate prerelease number
        id: generate-prerelease-number
        with:
          token: ${{secrets.github_token}}
          prefix: ${{needs.check_data.outputs.branch-name}}.${{needs.check_data.outputs.solution-patch-version}}
          prerelease_type: ${{needs.check_data.outputs.mode}}
          
      - name: Show workflow data
        run: |
          echo running on branch ${{ needs.check_data.outputs.branch-name }}
          echo running on branch type ${{ needs.check_data.outputs.branch-type }}
          echo Solution major version is ${{ needs.check_data.outputs.solution-major-version }}
          echo Solution minor version is ${{ needs.check_data.outputs.solution-minor-version }}
          echo Solution patch version is ${{ needs.check_data.outputs.solution-patch-version }}
          echo Branch major version is ${{ needs.check_data.outputs.branch-major-version }}
          echo Branch minor version is ${{ needs.check_data.outputs.branch-minor-version }}
          echo Version suffix is ${{ github.event.inputs.version-suffix }}
          echo Version mode is ${{ needs.check_data.outputs.mode }}
          echo Prerelease number is ${{ steps.generate-prerelease-number.outputs.prerelease_number }}
      
      - name: Set tag name for prerelease versions
        if: ${{ needs.check_data.outputs.mode != 'release' }}
        run: |
          echo "RELEASE_TAG=${{needs.check_data.outputs.branch-type}}-${{needs.check_data.outputs.solution-major-version}}.${{needs.check_data.outputs.solution-minor-version}}.${{needs.check_data.outputs.solution-patch-version}}-${{needs.check_data.outputs.mode}}-${{steps.generate-prerelease-number.outputs.prerelease_number}}" >> $GITHUB_ENV
          
      - name: Set tag name for release version
        if: ${{ needs.check_data.outputs.mode == 'release' }}
        run: |
          echo "RELEASE_TAG=${{needs.check_data.outputs.solution-major-version}}.${{needs.check_data.outputs.solution-minor-version}}.${{needs.check_data.outputs.solution-patch-version}}" >> $GITHUB_ENV
      
      - name: Update AssemblyFileVersion in SharedAssemblyInfo.cs
        uses: mingjun97/file-regex-replace@v1
        with:
          regex: 'System.Reflection.AssemblyFileVersion\("(.*)"\)'
          flags: g
          replacement: 'System.Reflection.AssemblyFileVersion("${{needs.check_data.outputs.solution-major-version}}.${{needs.check_data.outputs.solution-minor-version}}.${{needs.check_data.outputs.solution-patch-version}}.${{github.run_number}}")'
          include: 'SharedAssemblyInfo.cs'
          exclude: '.^'
          encoding: 'utf8'
          
      - name: Update AssemblyVersion in SharedAssemblyInfo.cs
        uses: mingjun97/file-regex-replace@v1
        with:
          regex: 'System.Reflection.AssemblyFileVersion\("(.*)"\)'
          flags: g
          replacement: 'System.Reflection.AssemblyVersion("${{needs.check_data.outputs.solution-major-version}}.${{needs.check_data.outputs.solution-minor-version}}.${{needs.check_data.outputs.solution-patch-version}}.${{github.run_number}}")'
          include: 'SharedAssemblyInfo.cs'
          exclude: '.^'
          encoding: 'utf8'

      - name: Update AssemblyInformationalVersion in SharedAssemblyInfo.cs
        uses: mingjun97/file-regex-replace@v1
        with:
          regex: 'System.Reflection.AssemblyFileVersion\("(.*)"\)'
          flags: g
          replacement: 'System.Reflection.AssemblyInformationalVersion("${{env.RELEASE_TAG}}")'
          include: 'SharedAssemblyInfo.cs'
          exclude: '.^'
          encoding: 'utf8'
      
      - name: Show SharedAssemblyInfo
        run: cat SharedAssemblyInfo.cs
        
      #- name: Update project version
      #  uses: roryprimrose/set-vs-sdk-project-version@v1
      #  with:
      #    version: ${{needs.check_data.outputs.solution-major-version}}.${{needs.check_data.outputs.solution-minor-version}}.${{needs.check_data.outputs.solution-patch-version}}.${{github.run_number}}
      #    assemblyVersion: ${{needs.check_data.outputs.solution-major-version}}.${{needs.check_data.outputs.solution-minor-version}}.${{needs.check_data.outputs.solution-patch-version}}.${{github.run_number}}
      #    fileVersion: ${{needs.check_data.outputs.solution-major-version}}.${{needs.check_data.outputs.solution-minor-version}}.${{needs.check_data.outputs.solution-patch-version}}.${{github.run_number}}
      #    informationalVersion: ${{needs.check_data.outputs.solution-major-version}}.${{needs.check_data.outputs.solution-minor-version}}.${{needs.check_data.outputs.solution-patch-version}}.${{github.run_number}}-${{needs.check_data.outputs.mode}}-${{steps.generate-prerelease-number.outputs.prerelease_number}}
      
      - name: Build in Release mode
        env:
          RID: ${{ matrix.RIDs }}
        run: dotnet publish ./SmartHomeApi.WebApi/SmartHomeApi.WebApi.csproj -c release -r ${{env.RID}} /p:PublishSingleFile=true /p:IncludeNativeLibrariesForSelfExtract=true --self-contained true
      
      - name: Build in Debug mode
        env:
          RID: ${{ matrix.RIDs }}
        run: dotnet publish ./SmartHomeApi.WebApi/SmartHomeApi.WebApi.csproj -c debug -r ${{env.RID}} /p:PublishSingleFile=true --self-contained true
      
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          prerelease: ${{ needs.check_data.outputs.mode != 'release' }}
          tag_name: ${{env.RELEASE_TAG}}
          #fail_on_unmatched_files: true

      - name: Upload Release Build Artifacts
        uses: actions/upload-artifact@v2
        env:
          RID: ${{ matrix.RIDs }}
        with:
          if-no-files-found: error
          name: ${{env.RELEASE_TAG}}_${{env.RID}}
          path: ./SmartHomeApi.WebApi/bin/release/net5.0/${{env.RID}}/publish/
          
      - name: Upload Debug Build Artifacts
        uses: actions/upload-artifact@v2
        env:
          RID: ${{ matrix.RIDs }}
        with:
          if-no-files-found: error
          name: ${{env.RELEASE_TAG}}_${{env.RID}}_debug
          path: ./SmartHomeApi.WebApi/bin/debug/net5.0/${{env.RID}}/publish/
          
      - name: Upload Release Assets
        id: upload-release-assets
        uses: dwenegar/upload-release-assets@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RID: ${{ matrix.RIDs }}
        with:
          release_id: ${{ steps.create_release.outputs.id }}
          assets_path: ./SmartHomeApi.WebApi/bin/release/net5.0/${{env.RID}}/publish/
          
      - name: Upload Debug Assets
        id: upload-debug-assets
        uses: dwenegar/upload-release-assets@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RID: ${{ matrix.RIDs }}
        with:
          release_id: ${{ steps.create_release.outputs.id }}
          assets_path: ./SmartHomeApi.WebApi/bin/debug/net5.0/${{env.RID}}/publish/
